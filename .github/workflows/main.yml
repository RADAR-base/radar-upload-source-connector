# Continuous integration, including test and integration test
name: Main test

# Run in master and dev branches and in all pull requests to those branches
on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]

env:
  DOCKER_IMAGE_BACKEND: radarbase/radar-upload-connect-backend
  DOCKER_IMAGE_FRONTEND: radarbase/radar-upload-connect-frontend
  DOCKER_IMAGE_CONNECTOR: radarbase/radar-connect-upload-source

jobs:
  # Build and test the code
  kotlin:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache
        uses: actions/cache@v2.0.0
        with:
          # Cache gradle directories
          path: |
            ~/.gradle/caches
            ~/.gradle/native
            ~/.gradle/wrapper
          # Key for restoring and saving the cache
          key: ${{ runner.os }}-gradle

      # Compile the code
      - name: Compile code
        run: ./gradlew assemble

      # Gradle check
      - name: Check
        run: ./gradlew check

  # Build and test the code
  node:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Use Node.js 14
        uses: actions/setup-node@v1
        with:
          node-version: 14

      # Compile the code
      - name: Install dependencies
        working-directory: ./radar-upload-frontend
        run: npm install

      # Compile the code
      - name: Build code
        working-directory: ./radar-upload-frontend
        run: npm run build

  docker:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/Dockerfile', '**/*.gradle.kts', 'gradle.properties', 'radar-upload-frontend/**', 'radar-upload-backend/src/main/**', 'kafka-connect-upload-source/src/main/**') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Add Docker labels and tags
      - name: Docker meta backend
        id: docker_meta_backend
        uses: crazy-max/ghaction-docker-meta@v2
        with:
          images: ${{ env.DOCKER_IMAGE_BACKEND }}

      - name: Docker meta frontend
        id: docker_meta_frontend
        uses: crazy-max/ghaction-docker-meta@v2
        with:
          images: ${{ env.DOCKER_IMAGE_FRONTEND }}

      - name: Docker meta connector
        id: docker_meta_connector
        uses: crazy-max/ghaction-docker-meta@v2
        with:
          images: ${{ env.DOCKER_IMAGE_CONNECTOR }}

      # Setup docker build environment
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build backend docker
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./radar-upload-backend/Dockerfile
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          load: true
          tags: ${{ steps.docker_meta_backend.outputs.tags }}
          # Use runtime labels from docker_meta_backend as well as fixed labels
          labels: |
            ${{ steps.docker_meta_backend.outputs.labels }}
            maintainer=Joris Borgdorff <joris@thehyve.nl>, Nivethika Mahasivam <nivethika@thehyve.nl>, Pauline Conde <pauline.conde@kcl.ac.uk>
            org.opencontainers.image.description=RADAR-base upload connector backend application
            org.opencontainers.image.authors=Joris Borgdorff <joris@thehyve.nl>, Nivethika Mahasivam <nivethika@thehyve.nl>, Pauline Conde <pauline.conde@kcl.ac.uk>
            org.opencontainers.image.vendor=RADAR-base
            org.opencontainers.image.licenses=Apache-2.0

      - name: Build frontend docker
        uses: docker/build-push-action@v2
        with:
          context: ./radar-upload-frontend
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          load: true
          tags: ${{ steps.docker_meta_frontend.outputs.tags }}
          # Use runtime labels from docker_meta_backend as well as fixed labels
          labels: |
            ${{ steps.docker_meta_frontend.outputs.labels }}
            maintainer=Peyman Mohtashami <peyman@thehyve.nl>, Pauline Conde <pauline.conde@kcl.ac.uk>
            org.opencontainers.image.description=RADAR-base upload connector frontend application
            org.opencontainers.image.authors=Peyman Mohtashami <peyman@thehyve.nl>, Pauline Conde <pauline.conde@kcl.ac.uk>
            org.opencontainers.image.vendor=RADAR-base
            org.opencontainers.image.licenses=Apache-2.0

      - name: Build upload connector docker
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./kafka-connect-upload-source/Dockerfile
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          load: true
          tags: ${{ steps.docker_meta_connector.outputs.tags }}
          # Use runtime labels from docker_meta_backend as well as fixed labels
          labels: |
            ${{ steps.docker_meta_connector.outputs.labels }}
            maintainer=Joris Borgdorff <joris@thehyve.nl>, Nivethika Mahasivam <nivethika@thehyve.nl>, Pauline Conde <pauline.conde@kcl.ac.uk>
            org.opencontainers.image.description=RADAR-base kafka connect upload connector
            org.opencontainers.image.authors=Joris Borgdorff <joris@thehyve.nl>, Nivethika Mahasivam <nivethika@thehyve.nl>, Pauline Conde <pauline.conde@kcl.ac.uk>
            org.opencontainers.image.vendor=RADAR-base
            org.opencontainers.image.licenses=Apache-2.0

      - name: Inspect docker images
        run: |
          docker image inspect ${{ env.DOCKER_IMAGE_BACKEND }}:${{ steps.docker_meta_backend.outputs.version }}
          docker image inspect ${{ env.DOCKER_IMAGE_CONNECTOR }}:${{ steps.docker_meta_connector.outputs.version }}
          docker image inspect ${{ env.DOCKER_IMAGE_FRONTEND }}:${{ steps.docker_meta_frontend.outputs.version }}
            
      - name: Check backend docker image
        run: >
          docker run --rm ${{ env.DOCKER_IMAGE_BACKEND }}:${{ steps.docker_meta_backend.outputs.version }} curl --help
          docker run --rm ${{ env.DOCKER_IMAGE_BACKEND }}:${{ steps.docker_meta_backend.outputs.version }} radar-upload-backend --help

      # Push the backend image on the dev and master branches
      - name: Push images
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          docker push ${{ env.DOCKER_IMAGE_BACKEND }}:${{ steps.docker_meta_backend.outputs.version }}
          docker push ${{ env.DOCKER_IMAGE_CONNECTOR }}:${{ steps.docker_meta_connector.outputs.version }}
          docker push ${{ env.DOCKER_IMAGE_FRONTEND }}:${{ steps.docker_meta_frontend.outputs.version }}